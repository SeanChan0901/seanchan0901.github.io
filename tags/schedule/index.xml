<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>schedule on 小羊Sean的blog</title>
    <link>seanchan0901.github.io/tags/schedule/</link>
    <description>Recent content in schedule on 小羊Sean的blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="seanchan0901.github.io/tags/schedule/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>优先级队列 priority queue</title>
      <link>seanchan0901.github.io/2020/priorityqueue/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>seanchan0901.github.io/2020/priorityqueue/</guid>
      <description>优先级队列（priority queue） 优先级队列的定义 优先级队列 是一种特殊的队列，是0个或多个元素的集合，每个元素都有一个优先级或权值，对优先级队列执行的操作有：
  查找一个元素 top
  插入一个元素 push
  删除一个元素 pop
在 最大优先级队列（max priority queue） 里 pop 删除的是优先级最大的元素，在 最小优先级队（min priority queue） 列里 pop 删除的是优先级最小的元素。（元素可以有相同的优先级）。
  优先级队列的描述 最大优先级队列的抽象数据类型描述如下（最小优先级队列也是同理）：
// 优先级队列的抽象类 template &amp;lt;typename T&amp;gt; class maxPriorityQueue { public: virtual ~maxPriorityQueue(){}; virtual bool empty() const = 0; // 判断队列是否为空  virtual int size() const = 0; // 返回队列元素个数  virtual const T&amp;amp; top() const = 0; // 返回优先级最大的元素  virtual void pop() = 0; // 删除优先级最大的元素  virtual void push(const T&amp;amp; theElement) = 0; // 插入一个元素theElement }; 线性表 描述最大优先级队列最简单的方法是无序线性表。如果使用 数组 那么插入元素的时间性能为 $\Theta(1)$ ，删除操作必须从无序的n个元素中找到优先级最大的元素进行删除，时间性能为 $\Theta(n)$ 。 使用 链表 如果每次都在链表头进行插入那么那么插入元素的时间复杂度为 $\Theta(1)$ ，删除操作的时间性能为 $\Theta(n)$ 。</description>
    </item>
    
  </channel>
</rss>